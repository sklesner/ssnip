<tw-passagedata pid="{pid}" name="{pageName}" tags="" position="225,100" size="100,100">&lt;&lt;cacheaudio &quot;bgm_r&quot; &quot;mp3|https://aipif-2023.s3.amazonaws.com/_asset/aa1a443d.mp3&quot;&gt;&gt;&lt;&lt;cacheaudio &quot;sfx_r&quot; &quot;mp3|https://aipif-2023.s3.amazonaws.com/_asset/246cbccb.mp3&quot;&gt;&gt;
&lt;html&gt;
  &lt;head&gt;
  &lt;style&gt;
   .emoji { font-size: 35vw; line-height: 1; cursor: pointer; user-select: none; display: flex; justify-content: center; align-items: center; margin-top: 100px;}
   .full-width-image { max-width: 100%; height: auto; cursor: pointer; }
   .container{pid} { display: flex; justify-content: center; align-items: center; width: 100%; height: 100vh; }
   .centered-buttons {text-align: center;}
 &lt;/style&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;div id=&quot;container{pid}&quot;&gt;&lt;span class=&quot;emoji&quot; onclick=&quot;toggleContent()&quot;&gt;{emoji}&lt;/span&gt;&lt;/div&gt;
  &lt;script&gt;
   container{pid} = document.getElementById(&quot;container{pid}&quot;);
   emoji{pid} = &quot;{emoji}&quot;;
   targetImageUrl = &quot;https://twine.ackop.com/{storyId}_picture_p{pid}.png&quot;;
   defaultImageUrl = &quot;https://joe.ackop.com/assets/img/generating.png&quot;;
   isEmoji = true;
   lastAttemptTime = 0;
   targetImageUrl2=&quot;&quot;;

   function toggleContent() {
     if (isEmoji) {
       checkImageAvailability(function(available) {
         if (available) {
           displayImage();
         } else {
           console.log(&quot;Image is not available yet.&quot;);
         }
       });
     } else {
       displayEmoji();
     }
   }
   
   function checkImageAvailability(callback) {
     const img = new Image();
     img.onload = function() {
       isImageAvailable = true;
       callback(true);
     };
     img.onerror = function() {
        isImageAvailable = false;
        const currentTime = Date.now();
        if (currentTime - lastAttemptTime &gt;= 5000) {
          this.src = targetImageUrl + &quot;?v=&quot; + currentTime;
          targetImageUrl2 = this.src;
          lastAttemptTime = currentTime;
        }
        callback(false);
     };
     img.src = targetImageUrl2 == &quot;&quot; ? targetImageUrl : targetImageUrl2;
   }

   function displayImage() {
     const img = document.createElement(&quot;img&quot;);
     img.src = targetImageUrl2 == &quot;&quot; ? targetImageUrl : targetImageUrl2;
     img.className = &quot;full-width-image&quot;;
     img.onclick = toggleContent;
     img.onerror = handleImageError;
     container{pid}.innerHTML = &quot;&quot;;
     container{pid}.appendChild(img);
     isEmoji = false;
   }

   function displayEmoji() {
     container{pid}.innerHTML = `&lt;span class=&quot;emoji&quot; onclick=&quot;toggleContent()&quot;&gt;${emoji{pid}}&lt;/span&gt;`;
     isEmoji = true;
   }

   function handleImageError() {
     const currentTime = Date.now();
     if (currentTime - lastAttemptTime &gt;= 5000) {
       this.src = targetImageUrl + &quot;?v=&quot; + currentTime;
       targetImageUrl2 = this.src;
       lastAttemptTime = currentTime;
     }
   }
  &lt;/script&gt;
 &lt;/body&gt;
&lt;/html&gt;

{sceneText}

&lt;div class=&quot;centered-buttons&quot;&gt;

&lt;&lt;if passage() == &quot;2&quot;&gt;&gt;
&lt;&lt;button &quot;prev‚óÄÔ∏è&quot;&gt;&gt;
    &lt;&lt;script&gt;&gt;
    window.location.href=&quot;https://joe.ackop.com/&quot;
    &lt;&lt;/script&gt;&gt;
&lt;&lt;/button&gt;&gt;&lt;&lt;button &quot;üè†&quot;&gt;&gt;
&lt;&lt;script&gt;&gt;window.location.href=&quot;https://joe.ackop.com/&quot;&lt;&lt;/script&gt;&gt;
&lt;&lt;/button&gt;&gt;&lt;&lt;button [[‚ñ∂Ô∏ènext|{nextPageName}]]&gt;&gt;
&lt;&lt;audio &quot;bgm_r&quot; stop&gt;&gt;
&lt;&lt;/button&gt;&gt;
&lt;&lt;else&gt;&gt;
&lt;&lt;button [[prev‚óÄÔ∏è|{prevPageName}]]&gt;&gt;
&lt;&lt;audio &quot;bgm_r&quot; stop&gt;&gt;
&lt;&lt;/button&gt;&gt;&lt;&lt;button &quot;üè†&quot;&gt;&gt;
&lt;&lt;script&gt;&gt;window.location.href=&quot;https://joe.ackop.com/&quot;&lt;&lt;/script&gt;&gt;
&lt;&lt;/button&gt;&gt;&lt;&lt;button [[‚ñ∂Ô∏ènext|{nextPageName}]]&gt;&gt;
&lt;&lt;audio &quot;bgm_r&quot; stop&gt;&gt;
&lt;&lt;/button&gt;&gt;&lt;&lt;/if&gt;&gt;&lt;/div&gt;
&lt;&lt;button &quot;üîä&quot;&gt;&gt;
&lt;&lt;audio &quot;sfx_r&quot; volume 0.4 play&gt;&gt;
&lt;&lt;audio &quot;bgm_r&quot; loop volume 0.02 play&gt;&gt;
&lt;&lt;/button&gt;&gt;&lt;&lt;button &quot;üéµ&quot;&gt;&gt;
&lt;&lt;audio &quot;bgm_r&quot; loop volume 0.02 play&gt;&gt;
&lt;&lt;/button&gt;&gt;&lt;&lt;button &quot;üó£Ô∏è&quot;&gt;&gt;
&lt;&lt;audio &quot;sfx_r&quot; volume 0.5 play&gt;&gt;
&lt;&lt;/button&gt;&gt;&lt;&lt;button &quot;üîá&quot;&gt;&gt; &lt;&lt;masteraudio stop&gt;&gt;&lt;&lt;/button&gt;&gt;

&lt;div style=&quot;margin: 0px auto; width: 30%; align-items: center; justify-content: center; display: flex;&quot;&gt; 
    &lt;button id=&quot;upvoteButton&quot; onclick=&quot;toggleUpvote()&quot;&gt;üëç&lt;/button&gt; &lt;span id=&quot;counterDisplay&quot; style=&quot;padding:0.5em; display: none;&quot;&gt;0&lt;/span&gt; &lt;button id=&quot;downvoteButton&quot; onclick=&quot;toggleDownvote()&quot;&gt;üëé&lt;/button&gt; 
&lt;/div&gt;

&lt;style&gt;
#upvoteButton { }
#upvoteButton.upvoted { background-color: #4CAF50; color: white; }
#downvoteButton { }
#downvoteButton.downvoted { background-color: red; color: white; }
&lt;/style&gt;

&lt;&lt;script&gt;&gt;
// Initialize vote state if not already set
if (typeof State.variables.counter{pid} === &apos;undefined&apos;) {
    State.variables.counter{pid} = 0;
    State.variables.isUpvoted{pid} = false;
    State.variables.isDownvoted{pid} = false;
}

// Function to update the UI based on state variables
window.updateVoteUI = function() {
    const counterDisplay = document.getElementById(&apos;counterDisplay&apos;);
    const upvoteButton = document.getElementById(&apos;upvoteButton&apos;);
    const downvoteButton = document.getElementById(&apos;downvoteButton&apos;);

    // Update counter display
    counterDisplay.innerHTML = State.variables.counter{pid};

    // Update button styles based on vote status
    if (State.variables.isUpvoted{pid}) {
        upvoteButton.classList.add(&apos;upvoted&apos;);
    } else {
        upvoteButton.classList.remove(&apos;upvoted&apos;);
    }

    if (State.variables.isDownvoted{pid}) {
        downvoteButton.classList.add(&apos;downvoted&apos;);
    } else {
        downvoteButton.classList.remove(&apos;downvoted&apos;);
    }
    console.log(&apos;updated UI&apos;);
}

// Function to toggle upvote
window.toggleUpvote = async function() {
    const upvoteButton = document.getElementById(&apos;upvoteButton&apos;);
    const downvoteButton = document.getElementById(&apos;downvoteButton&apos;);
    let voteValue = 0;

    if (!State.variables.isUpvoted{pid}) {
        // Upvote logic
        if (State.variables.isDownvoted{pid}) {
            State.variables.isDownvoted{pid} = false;
            State.variables.counter{pid}++;
            try {
              let response = await fetch(&apos;https://joe.ackop.com/api/v020/vote00010&apos;, {
                  method: &apos;POST&apos;,
                  headers: {
                      &apos;Content-Type&apos;: &apos;application/json&apos;,
                  },
                  body: JSON.stringify({
                      vote_type_id: &quot;d&quot;,
                      asset_type_id: &quot;c&quot;, 
                      internal_id: &quot;{storyId}&quot;,
                      external_id: &quot;{pid}&quot;,
                      vote_value: -1
                  }),
              });
              let data = await response.json();
              console.log(&apos;db response:&apos;, data);
            } catch (error) {
                console.error(&apos;Error sending vote:&apos;, error);
            }
        }
        State.variables.counter{pid}++;
        State.variables.isUpvoted{pid} = true;
        voteValue++;
    } else {
        // Remove upvote
        State.variables.counter{pid}--;
        State.variables.isUpvoted{pid} = false;
        voteValue--;
    }

    // Update UI and save state
    updateVoteUI();

    try {
        let response = await fetch(&apos;https://joe.ackop.com/api/v020/vote00010&apos;, {
            method: &apos;POST&apos;,
            headers: {
                &apos;Content-Type&apos;: &apos;application/json&apos;,
            },
            body: JSON.stringify({
                vote_type_id: &quot;u&quot;,
                asset_type_id: &quot;c&quot;, 
                internal_id: &quot;{storyId}&quot;,
                external_id: &quot;{pid}&quot;,
                vote_value: voteValue
            }),
        });
        let data = await response.json();
        console.log(&apos;db response:&apos;, data);
    } catch (error) {
        console.error(&apos;Error sending vote:&apos;, error);
    }
}

// Function to toggle downvote
window.toggleDownvote = async function() {
    const upvoteButton = document.getElementById(&apos;upvoteButton&apos;);
    const downvoteButton = document.getElementById(&apos;downvoteButton&apos;);
    let voteValue = 0;

    if (!State.variables.isDownvoted{pid}) {
        // Downvote logic
        if (State.variables.isUpvoted{pid}) {
            State.variables.isUpvoted{pid} = false;
            State.variables.counter{pid}--;
            try {
              let response = await fetch(&apos;https://joe.ackop.com/api/v020/vote00010&apos;, {
                  method: &apos;POST&apos;,
                  headers: {
                      &apos;Content-Type&apos;: &apos;application/json&apos;,
                  },
                  body: JSON.stringify({
                      vote_type_id: &quot;u&quot;,
                      asset_type_id: &quot;c&quot;, 
                      internal_id: &quot;{storyId}&quot;,
                      external_id: &quot;{pid}&quot;,
                      vote_value: -1
                  }),
              });
              let data = await response.json();
              console.log(&apos;db response:&apos;, data);
            } catch (error) {
                console.error(&apos;Error sending vote:&apos;, error);
            }
        }
        State.variables.counter{pid}--;
        State.variables.isDownvoted{pid} = true;
        voteValue++;
    } else {
        // Remove downvote
        State.variables.counter{pid}++;
        State.variables.isDownvoted{pid} = false;
        voteValue--;
    }

    // Update UI and save state
    updateVoteUI();

    try {
        let response = await fetch(&apos;https://joe.ackop.com/api/v020/vote00010&apos;, {
            method: &apos;POST&apos;,
            headers: {
                &apos;Content-Type&apos;: &apos;application/json&apos;,
            },
            body: JSON.stringify({
                vote_type_id: &quot;d&quot;,  
                asset_type_id: &quot;c&quot;, 
                internal_id: &quot;{storyId}&quot;,
                external_id: &quot;{pid}&quot;,
                vote_value: voteValue
            }),
        });
        let data = await response.json();
        console.log(&apos;db response:&apos;, data);
    } catch (error) {
        console.error(&apos;Error sending vote:&apos;, error);
    }
}

window.fetchInitialCount = async function() {
  try {
      // Simulate API call with fetch (replace with actual API endpoint)
      let response = await fetch(&apos;https://joe.ackop.com/api/v020/vote_sum00011?asset_type_id=c&amp;internal_id={storyId}&amp;external_id={pid}&apos;);
      let data = await response.json();
      console.log(&apos;db response:&apos;, data);
      State.variables.counter{pid} = data.count;
      updateVoteUI(); 
  } catch (error) {
      console.warn(&apos;Error fetching initial value:&apos;, error);
  }
}

// Initialize UI when passage loads
$(document).ready(function() {
    fetchInitialCount();
    updateVoteUI();
    console.log(&apos;passage loaded&apos;);
});

&lt;&lt;/script&gt;&gt;

</tw-passagedata>
